/api/users:
  post:
    summary: Crea un nuevo usuario.
    description: Crea un nuevo usuario con la información proporcionada, asignando roles y permisos.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - fullName
              - email
              - password
            properties:
              fullName:
                type: string
                example: John Doe
              email:
                type: string
                format: email
                example: john.doe@example.com
              password:
                type: string
                example: securePassword123
              roles:
                type: array
                items:
                  type: string
                  enum: [admin, employee, developer]
                example: [employee]
    responses:
      '201':
        description: Usuario creado exitosamente.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationResponse'
      '400':
        description: Error si los campos requeridos no se proporcionan o son inválidos.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '409':
        description: Error si el correo electrónico ya está registrado.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
    tags:
      - Users
  get: # Esta ruta ahora obtiene TODOS los usuarios (habilitados y deshabilitados)
    summary: Obtiene TODOS los usuarios (habilitados y deshabilitados).
    description: Retorna una lista completa de todos los usuarios registrados en el sistema, incluyendo los deshabilitados.
    responses:
      '200':
        description: Lista de todos los usuarios.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserListResponse'
            example: # Ejemplo para esta ruta que incluye usuarios deshabilitados
              success: true
              message: Todos los usuarios recuperados exitosamente.
              data:
                - id: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                  fullName: "John Doe"
                  username: "johndoe1234"
                  email: "john.doe@example.com"
                  roles: ["employee"]
                  isEnabled: true
                  permissions: { "control_usuarios": { "read": false, "write": false, "delete": false }, "inventario": { "read": false, "write": false, "delete": false }, "ventas_diarias": { "read": true, "write": true, "delete": false } }
                - id: "b2c3d4e5-f6a7-8901-2345-67890abcdef0"
                  fullName: "Jane Smith"
                  username: "janesmith5678"
                  email: "jane.smith@example.com"
                  roles: ["admin"]
                  isEnabled: false # Este es un usuario deshabilitado
                  permissions: { "control_usuarios": { "read": true, "write": true, "delete": true }, "inventario": { "read": true, "write": true, "delete": true }, "ventas_diarias": { "read": true, "write": true, "delete": true } }
    tags:
      - Users

/api/users/enabled: 
  get:
    summary: Obtiene solo los usuarios habilitados.
    description: Retorna una lista de usuarios que están activos en el sistema (isEnabled true).
    responses:
      '200':
        description: Lista de usuarios habilitados.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserListResponse'
            example: # Ejemplo para esta ruta que solo incluye usuarios habilitados
              success: true
              message: Usuarios habilitados recuperados exitosamente.
              data:
                - id: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                  fullName: "John Doe"
                  username: "johndoe1234"
                  email: "john.doe@example.com"
                  roles: ["employee"]
                  isEnabled: true
                  permissions: { "control_usuarios": { "read": false, "write": false, "delete": false }, "inventario": { "read": false, "write": false, "delete": false }, "ventas_diarias": { "read": true, "write": true, "delete": false } }
    tags:
      - Users

/api/users/{id}:
  get:
    summary: Obtiene un usuario por su ID.
    description: Retorna la información de un usuario específico basado en el ID proporcionado.
    parameters:
      - in: path
        name: id
        required: true
        description: ID del usuario a obtener.
        schema:
          type: string
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
    responses:
      '200':
        description: Usuario encontrado.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResponse'
      '404':
        description: Usuario no encontrado o deshabilitado.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
    tags:
      - Users
  put:
    summary: Actualiza la información de un usuario por su ID.
    description: Permite actualizar los detalles de un usuario específico. Todos los campos en el cuerpo son opcionales, pero al menos uno debe ser proporcionado.
    parameters:
      - in: path
        name: id
        required: true
        description: ID del usuario a actualizar.
        schema:
          type: string
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              fullName:
                type: string
                example: Jane Doe
              email:
                type: string
                format: email
                example: jane.doe@example.com
              password:
                type: string
                example: newSecurePassword456
              roles:
                type: array
                items:
                  type: string
                  enum: [admin, employee, developer]
                example: [admin]
              permissions:
                type: object
                example: { "control_usuarios": { "read": true, "write": true, "delete": true }, "inventario": { "read": true, "write": true, "delete": true }, "ventas_diarias": { "read": true, "write": true, "delete": true } }
            minProperties: 1
    responses:
      '200':
        description: Información del usuario actualizada exitosamente.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateResponse'
      '400':
        description: Error si los datos de actualización son inválidos.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '404':
        description: Usuario no encontrado o deshabilitado.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '409':
        description: El nuevo correo electrónico ya está en uso por otro usuario.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
    tags:
      - Users

/api/users/{id}/disable:
  patch:
    summary: Deshabilita un usuario por su ID.
    description: Marca a un usuario específico como deshabilitado. Esto no elimina el usuario, solo lo inactiva.
    parameters:
      - in: path
        name: id
        required: true
        description: ID del usuario a deshabilitar.
        schema:
          type: string
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
    responses:
      '200':
        description: Usuario deshabilitado exitosamente.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDisableResponse'
      '404':
        description: Usuario no encontrado o ya deshabilitado.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
    tags:
      - Users

/api/auth/login:
  post:
    summary: Inicia sesión de usuario.
    description: Permite iniciar sesión con correo electrónico o nombre de usuario y contraseña.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - identifier
              - password
            properties:
              identifier:
                type: string
                description: Correo electrónico o nombre de usuario del usuario.
                example: john.doe@example.com
              password:
                type: string
                description: Contraseña del usuario.
                example: securePassword123
    responses:
      '200':
        description: Inicio de sesión exitoso. Devuelve un token de autenticación (simulado por ahora).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginResponse'
      '400':
        description: Se deben proporcionar el identificador y la contraseña.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '401':
        description: Credenciales inválidas o usuario deshabilitado.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
    tags:
      - Authentication

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
        fullName:
          type: string
          example: John Doe
        username:
          type: string
          example: johndoe1234
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          description: NOTA En un entorno real, las contraseñas no se exponen.
          example: securePassword123
        roles:
          type: array
          items:
            type: string
            enum: [admin, employee, developer]
          example: [employee]
        isEnabled:
          type: boolean
          example: true
        permissions:
          type: object
          example: { "control_usuarios": { "read": false, "write": false, "delete": false }, "inventario": { "read": false, "write": false, "delete": false }, "ventas_diarias": { "read": true, "write": true, "delete": false } }

    UserCreationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Usuario 'johndoe1234' creado exitosamente."
        data:
          type: object
          properties:
            id:
              type: string
              example: a1b2c3d4-e5f6-7890-1234-567890abcdef
            username:
              type: string
              example: johndoe1234

    UserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Usuario encontrado."
        data:
          $ref: '#/components/schemas/User' 

    UserListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Usuarios recuperados exitosamente."
        data:
          type: array
          items:
            $ref: '#/components/schemas/User' 

    UserUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Información del usuario actualizada exitosamente."
        data:
          type: object
          properties:
            id:
              type: string
              example: a1b2c3d4-e5f6-7890-1234-567890abcdef
            username:
              type: string
              example: janedoe5678 

    UserDisableResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Usuario con ID 'a1b2c3d4-e5f6-7890-1234-567890abcdef' deshabilitado exitosamente."

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Inicio de sesión exitoso"
        token:
          type: string
          example: "generated_uuid_token_example" 

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Mensaje de error específico."
        errors: 
          type: array
          items:
            type: string
            example: "Detalle del error de validación."